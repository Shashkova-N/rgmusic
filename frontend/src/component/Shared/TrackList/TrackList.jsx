// frontend/src/component/Shared/TrackList/TrackList.jsx
import { useState, useRef, useEffect } from 'react';
import './TrackList.scss';

const API_URL = process.env.REACT_APP_API_URL;

export function TrackList({ tracks }) {
  const [currentTrackId, setCurrentTrackId] = useState(null);
  const [isPlaying, setIsPlaying] = useState(false);
  const audioRef = useRef(new Audio());

  // –ó–∞–¥–∞—ë–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç—Ä–µ–∫–∞
  useEffect(() => {
    const audio = audioRef.current;
    const onEnded = () => {
      setIsPlaying(false);
      setCurrentTrackId(null);
    };
    audio.addEventListener('ended', onEnded);
    return () => {
      audio.removeEventListener('ended', onEnded);
      audio.pause();
    };
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ URL –∫ —Ñ–∞–π–ª—É
  const getFileUrl = (track) => {
    // –µ—Å–ª–∏ backend –æ—Ç–¥–∞—ë—Ç file_url (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π) ‚Äî –±–µ—Ä—ë–º –µ–≥–æ
    // if (track.file_url) {
    //   return track.file_url.startsWith('http')
    //     ? track.file_url
    //     : `${API_URL}${track.file_url}`;
    // }

    // –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ file_watermarked
    if (track.file_watermarked) {
      return `${API_URL}/tracks/media/watermarked/${track.file_watermarked}`;
    }

    return '';
  };

  const handlePlayPause = (track) => {
    const audio = audioRef.current;
    const src = getFileUrl(track);
    if (!src) {
      console.error('No audio source for track', track);
      return;
    }

    // –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ç—Ä–µ–∫
    if (currentTrackId === track.id) {
      if (audio.paused) {
        audio.play();
        setIsPlaying(true);
      } else {
        audio.pause();
        setIsPlaying(false);
      }
    } else {
      audio.pause();
      audio.src = src;
      audio.load();
      audio.play();
      setCurrentTrackId(track.id);
      setIsPlaying(true);
    }
  };

  const handleDownload = (track) => {
    const src = getFileUrl(track);
    if (!src) return;
    const link = document.createElement('a');
    link.href = src;
    // –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å title –∏–ª–∏ vk_number –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    link.download = `${track.title || 'track'}.mp3`;
    document.body.appendChild(link);
    link.click();
    link.remove();
  };

  if (!tracks || tracks.length === 0) {
    return <p>–ù–µ—Ç —Ç—Ä–µ–∫–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</p>;
  }

  return (
    <div className="track-list">
      {tracks.map(track => (
        <div className="track-row" key={track.id}>
          <div className="track-play">
            <button onClick={() => handlePlayPause(track)}>
              {currentTrackId === track.id && isPlaying ? '‚è∏' : '‚ñ∂'}
            </button>
          </div>
          <div className="track-vk">{track.vk_number}</div>
          <div className="track-duration">{track.duration} —Å–µ–∫</div>
          <div className="track-price">{track.price} ‚ÇΩ</div>
          <div className="track-buttons">
            <button
              title="–°–∫–∞—á–∞—Ç—å —Ç—Ä–µ–∫"
              onClick={() => handleDownload(track)}
            >
              üì•
            </button>
            <button
              title="–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É"
              onClick={() => {/* –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ */}}
            >
              üõí
            </button>
          </div>
        </div>
      ))}
    </div>
  );
}
